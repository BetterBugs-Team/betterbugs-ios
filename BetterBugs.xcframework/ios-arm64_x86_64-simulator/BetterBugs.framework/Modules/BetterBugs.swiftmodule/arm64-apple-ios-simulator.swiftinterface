// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name BetterBugs
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import AVKit
import AudioToolbox
@_exported import BetterBugs
import CoreGraphics
import CoreLocation
import CryptoKit
import DeveloperToolsSupport
import Foundation
import ImageIO
import Network
import ObjectiveC
import Photos
import PhotosUI
import ReplayKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import ObjectiveC.runtime
public struct ShapeTransform : Swift.Codable, Swift.Equatable {
  public var translation: CoreFoundation.CGPoint
  public var rotation: CoreFoundation.CGFloat
  public var scale: CoreFoundation.CGFloat
  public static let identity: BetterBugs.ShapeTransform
  public static func == (a: BetterBugs.ShapeTransform, b: BetterBugs.ShapeTransform) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension BetterBugs.ShapeTransform {
  public var isIdentity: Swift.Bool {
    get
  }
  public var affineTransform: CoreFoundation.CGAffineTransform {
    get
  }
  public func begin(context: CoreGraphics.CGContext)
  public func end(context: CoreGraphics.CGContext)
  public func translated(by delta: CoreFoundation.CGPoint) -> BetterBugs.ShapeTransform
  public func scaled(by amount: CoreFoundation.CGFloat) -> BetterBugs.ShapeTransform
  public func rotated(by radians: CoreFoundation.CGFloat) -> BetterBugs.ShapeTransform
}
public protocol Shape : AnyObject, Swift.Decodable, Swift.Encodable {
  var id: Swift.String { get set }
  static var type: Swift.String { get }
  func render(in context: CoreGraphics.CGContext)
  func hitTest(point: CoreFoundation.CGPoint) -> Swift.Bool
  func apply(userSettings: BetterBugs.UserSettings)
}
public protocol ShapeWithBoundingRect : BetterBugs.Shape {
  var boundingRect: CoreFoundation.CGRect { get }
}
extension BetterBugs.ShapeWithBoundingRect {
  public func hitTest(point: CoreFoundation.CGPoint) -> Swift.Bool
}
public protocol ShapeWithTransform : BetterBugs.Shape {
  var transform: BetterBugs.ShapeTransform { get set }
}
public protocol ShapeSelectable : BetterBugs.ShapeWithBoundingRect, BetterBugs.ShapeWithTransform {
}
extension BetterBugs.ShapeSelectable {
  public func hitTest(point: CoreFoundation.CGPoint) -> Swift.Bool
}
public protocol ShapeWithStandardState : AnyObject {
  var strokeColor: UIKit.UIColor? { get set }
  var fillColor: UIKit.UIColor? { get set }
  var strokeWidth: CoreFoundation.CGFloat { get set }
}
extension BetterBugs.ShapeWithStandardState {
  public func apply(userSettings: BetterBugs.UserSettings)
}
public protocol ShapeWithStrokeState : AnyObject {
  var strokeColor: UIKit.UIColor { get set }
  var strokeWidth: CoreFoundation.CGFloat { get set }
}
extension BetterBugs.ShapeWithStrokeState {
  public func apply(userSettings: BetterBugs.UserSettings)
}
public protocol ShapeWithTwoPoints {
  var a: CoreFoundation.CGPoint { get set }
  var b: CoreFoundation.CGPoint { get set }
  var strokeWidth: CoreFoundation.CGFloat { get set }
}
extension BetterBugs.ShapeWithTwoPoints {
  public var rect: CoreFoundation.CGRect {
    get
  }
  public var squareRect: CoreFoundation.CGRect {
    get
  }
  public var boundingRect: CoreFoundation.CGRect {
    get
  }
}
public protocol ShapeWithThreePoints {
  var a: CoreFoundation.CGPoint { get set }
  var b: CoreFoundation.CGPoint { get set }
  var c: CoreFoundation.CGPoint { get set }
  var strokeWidth: CoreFoundation.CGFloat { get set }
}
extension BetterBugs.ShapeWithThreePoints {
  public var rect: CoreFoundation.CGRect {
    get
  }
  public var boundingRect: CoreFoundation.CGRect {
    get
  }
}
@_inheritsConvenienceInitializers public class AngleTool : BetterBugs.DrawingToolForShapeWithThreePoints {
  override public var name: Swift.String {
    get
  }
  override public func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithThreePoints
  override public init()
  @objc deinit
}
public class PenTool : BetterBugs.DrawingTool {
  public typealias ShapeType = BetterBugs.PenShape
  public var name: Swift.String {
    get
  }
  public var shapeInProgress: BetterBugs.PenShape?
  public var isProgressive: Swift.Bool {
    get
  }
  public var velocityBasedWidth: Swift.Bool
  public init()
  public func handleTap(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragStart(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragContinue(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint, velocity: CoreFoundation.CGPoint)
  public func handleDragEnd(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragCancel(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func renderShapeInProgress(transientContext: CoreGraphics.CGContext)
  @objc deinit
}
@_inheritsConvenienceInitializers public class EraserTool : BetterBugs.PenTool {
  override public var name: Swift.String {
    get
  }
  override public var isProgressive: Swift.Bool {
    get
  }
  override public init()
  override public func handleTap(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  override public func handleDragStart(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  override public func renderShapeInProgress(transientContext: CoreGraphics.CGContext)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class TextShapeEditingView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let deleteControlView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let resizeAndRotateControlView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let changeWidthControlView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let textView: UIKit.UITextView
  public enum DragActionType {
    case delete
    case resizeAndRotate
    case changeWidth
    public static func == (a: BetterBugs.TextShapeEditingView.DragActionType, b: BetterBugs.TextShapeEditingView.DragActionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Control {
    public let view: UIKit.UIView
    public let dragActionType: BetterBugs.TextShapeEditingView.DragActionType
  }
  @_Concurrency.MainActor @preconcurrency public var controls: [BetterBugs.TextShapeEditingView.Control] {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @discardableResult
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func addStandardControls()
  @_Concurrency.MainActor @preconcurrency public func addControl<T>(dragActionType: BetterBugs.TextShapeEditingView.DragActionType, view: T, applyConstraints: (UIKit.UITextView, T) -> Swift.Void) where T : UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func getDragActionType(point: CoreFoundation.CGPoint) -> BetterBugs.TextShapeEditingView.DragActionType?
  @objc deinit
}
public protocol TextToolDelegate : AnyObject {
  func textToolPointForNewText(tappedPoint: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  func textToolDidTapAway(tappedPoint: CoreFoundation.CGPoint)
  func textToolWillUseEditingView(_ editingView: BetterBugs.TextShapeEditingView)
  func textToolDidUpdateEditingViewTransform(_ editingView: BetterBugs.TextShapeEditingView, transform: BetterBugs.ShapeTransform)
}
@objc public class TextTool : ObjectiveC.NSObject, BetterBugs.DrawingTool {
  final public let isProgressive: Swift.Bool
  final public let name: Swift.String
  weak public var delegate: (any BetterBugs.TextToolDelegate)?
  public init(delegate: (any BetterBugs.TextToolDelegate)? = nil)
  public func activate(shapeUpdater: any BetterBugs.DrawsanaViewShapeUpdating, context: BetterBugs.ToolOperationContext, shape: (any BetterBugs.Shape)?)
  public func deactivate(context: BetterBugs.ToolOperationContext)
  public func handleTap(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragStart(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragContinue(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint, velocity: CoreFoundation.CGPoint)
  public func handleDragEnd(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragCancel(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func apply(context: BetterBugs.ToolOperationContext, userSettings: BetterBugs.UserSettings)
  @objc deinit
}
extension BetterBugs.TextTool : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
}
@_inheritsConvenienceInitializers public class StarTool : BetterBugs.DrawingToolForShapeWithTwoPoints {
  override public var name: Swift.String {
    get
  }
  override public func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class PentagonTool : BetterBugs.DrawingToolForShapeWithTwoPoints {
  override public var name: Swift.String {
    get
  }
  override public func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class TriangleTool : BetterBugs.DrawingToolForShapeWithTwoPoints {
  override public var name: Swift.String {
    get
  }
  override public func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints
  override public init()
  @objc deinit
}
open class DrawingToolForShapeWithThreePoints : BetterBugs.DrawingTool {
  public typealias ShapeType = BetterBugs.Shape & BetterBugs.ShapeWithThreePoints
  open var name: Swift.String {
    get
  }
  public var shapeInProgress: (any BetterBugs.Shape & BetterBugs.ShapeWithThreePoints)?
  public var isProgressive: Swift.Bool {
    get
  }
  public init()
  open func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithThreePoints
  public func handleTap(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragStart(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragContinue(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint, velocity: CoreFoundation.CGPoint)
  public func handleDragEnd(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragCancel(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func renderShapeInProgress(transientContext: CoreGraphics.CGContext)
  public func apply(context: BetterBugs.ToolOperationContext, userSettings: BetterBugs.UserSettings)
  @objc deinit
}
@_inheritsConvenienceInitializers public class LineTool : BetterBugs.DrawingToolForShapeWithTwoPoints {
  override public var name: Swift.String {
    get
  }
  override public func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class ArrowTool : BetterBugs.DrawingToolForShapeWithTwoPoints {
  override public var name: Swift.String {
    get
  }
  override public func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class RectTool : BetterBugs.DrawingToolForShapeWithTwoPoints {
  override public var name: Swift.String {
    get
  }
  override public func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class EllipseTool : BetterBugs.DrawingToolForShapeWithTwoPoints {
  override public var name: Swift.String {
    get
  }
  override public func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints
  override public init()
  @objc deinit
}
open class DrawingToolForShapeWithTwoPoints : BetterBugs.DrawingTool {
  public typealias ShapeType = BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints
  open var name: Swift.String {
    get
  }
  public var shapeInProgress: (any BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints)?
  public var isProgressive: Swift.Bool {
    get
  }
  public init()
  open func makeShape() -> any BetterBugs.Shape & BetterBugs.ShapeWithTwoPoints
  public func handleTap(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragStart(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragContinue(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint, velocity: CoreFoundation.CGPoint)
  public func handleDragEnd(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragCancel(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func renderShapeInProgress(transientContext: CoreGraphics.CGContext)
  public func apply(context: BetterBugs.ToolOperationContext, userSettings: BetterBugs.UserSettings)
  @objc deinit
}
public protocol SelectionToolDelegate : AnyObject {
  func selectionToolDidTapOnAlreadySelectedShape(_ shape: any BetterBugs.ShapeSelectable)
}
public class SelectionTool : BetterBugs.DrawingTool {
  final public let name: Swift.String
  public var isProgressive: Swift.Bool {
    get
  }
  weak public var delegate: (any BetterBugs.SelectionToolDelegate)?
  public init(delegate: (any BetterBugs.SelectionToolDelegate)? = nil)
  public func deactivate(context: BetterBugs.ToolOperationContext)
  public func apply(context: BetterBugs.ToolOperationContext, userSettings: BetterBugs.UserSettings)
  public func handleTap(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragStart(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragContinue(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint, velocity: CoreFoundation.CGPoint)
  public func handleDragEnd(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  public func handleDragCancel(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ToolSettings {
  public var selectedShape: (any BetterBugs.ShapeSelectable)? {
    get
    set
  }
  public var interactiveView: UIKit.UIView? {
    get
    set
  }
  public var isPersistentBufferDirty: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DrawingOperationStack {
  weak public var delegate: (any BetterBugs.DrawingOperationStackDelegate)?
  public var canUndo: Swift.Bool {
    get
  }
  public var canRedo: Swift.Bool {
    get
  }
  public var undoStack: [any BetterBugs.DrawingOperation] {
    get
  }
  public func apply(operation: any BetterBugs.DrawingOperation)
  @objc public func undo()
  @objc public func redo()
  @objc public func clearRedoStack()
  @objc deinit
}
public protocol DrawingOperationStackDelegate : AnyObject {
  func drawingOperationStackDidUndo(_ operationStack: BetterBugs.DrawingOperationStack, operation: any BetterBugs.DrawingOperation)
  func drawingOperationStackDidRedo(_ operationStack: BetterBugs.DrawingOperationStack, operation: any BetterBugs.DrawingOperation)
  func drawingOperationStackDidApply(_ operationStack: BetterBugs.DrawingOperationStack, operation: any BetterBugs.DrawingOperation)
}
public protocol DrawingOperation {
  func shouldAdd(to operationStack: BetterBugs.DrawingOperationStack) -> Swift.Bool
  func apply(drawing: BetterBugs.Drawing)
  func revert(drawing: BetterBugs.Drawing)
}
extension BetterBugs.DrawingOperation {
  public func shouldAdd(to operationStack: BetterBugs.DrawingOperationStack) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class UserSettings {
  public var strokeColor: UIKit.UIColor? {
    get
    set
  }
  public var fillColor: UIKit.UIColor? {
    get
    set
  }
  public var strokeWidth: CoreFoundation.CGFloat {
    get
    set
  }
  public var fontName: Swift.String {
    get
    set
  }
  public var fontSize: CoreFoundation.CGFloat {
    get
    set
  }
  @objc deinit
}
public struct ToolOperationContext {
  public let drawing: BetterBugs.Drawing
  public let operationStack: BetterBugs.DrawingOperationStack
  public let userSettings: BetterBugs.UserSettings
  public let toolSettings: BetterBugs.ToolSettings
}
public protocol DrawingTool : AnyObject {
  var isProgressive: Swift.Bool { get }
  var name: Swift.String { get }
  func activate(shapeUpdater: any BetterBugs.DrawsanaViewShapeUpdating, context: BetterBugs.ToolOperationContext, shape: (any BetterBugs.Shape)?)
  func deactivate(context: BetterBugs.ToolOperationContext)
  func handleTap(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  func handleDragStart(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  func handleDragContinue(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint, velocity: CoreFoundation.CGPoint)
  func handleDragEnd(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  func handleDragCancel(context: BetterBugs.ToolOperationContext, point: CoreFoundation.CGPoint)
  func apply(context: BetterBugs.ToolOperationContext, userSettings: BetterBugs.UserSettings)
  func renderShapeInProgress(transientContext: CoreGraphics.CGContext)
}
extension BetterBugs.DrawingTool {
  public func activate(shapeUpdater: any BetterBugs.DrawsanaViewShapeUpdating, context: BetterBugs.ToolOperationContext, shape: (any BetterBugs.Shape)?)
  public func deactivate(context: BetterBugs.ToolOperationContext)
  public func apply(context: BetterBugs.ToolOperationContext, userSettings: BetterBugs.UserSettings)
  public func renderShapeInProgress(transientContext: CoreGraphics.CGContext)
}
public struct AddShapeOperation : BetterBugs.DrawingOperation {
  public init(shape: any BetterBugs.Shape)
  public func apply(drawing: BetterBugs.Drawing)
  public func revert(drawing: BetterBugs.Drawing)
}
public struct RemoveShapeOperation : BetterBugs.DrawingOperation {
  public init(shape: any BetterBugs.Shape)
  public func apply(drawing: BetterBugs.Drawing)
  public func revert(drawing: BetterBugs.Drawing)
}
public struct ChangeTransformOperation : BetterBugs.DrawingOperation {
  public init(shape: any BetterBugs.ShapeWithTransform, transform: BetterBugs.ShapeTransform, originalTransform: BetterBugs.ShapeTransform)
  public func apply(drawing: BetterBugs.Drawing)
  public func revert(drawing: BetterBugs.Drawing)
}
public struct EditTextOperation : BetterBugs.DrawingOperation {
  public init(shape: BetterBugs.TextShape, originalText: Swift.String, text: Swift.String)
  public func shouldAdd(to operationStack: BetterBugs.DrawingOperationStack) -> Swift.Bool
  public func apply(drawing: BetterBugs.Drawing)
  public func revert(drawing: BetterBugs.Drawing)
}
public struct ChangeExplicitWidthOperation : BetterBugs.DrawingOperation {
  public func apply(drawing: BetterBugs.Drawing)
  public func revert(drawing: BetterBugs.Drawing)
}
public let DRAWSANA_VERSION: Swift.String
public protocol DrawsanaViewDelegate : AnyObject {
  func drawsanaView(_ drawsanaView: BetterBugs.DrawsanaView, didSwitchTo tool: any BetterBugs.DrawingTool)
  func drawsanaView(_ drawsanaView: BetterBugs.DrawsanaView, didStartDragWith tool: any BetterBugs.DrawingTool)
  func drawsanaView(_ drawsanaView: BetterBugs.DrawsanaView, didEndDragWith tool: any BetterBugs.DrawingTool)
  func drawsanaView(_ drawsanaView: BetterBugs.DrawsanaView, didChangeStrokeColor strokeColor: UIKit.UIColor?)
  func drawsanaView(_ drawsanaView: BetterBugs.DrawsanaView, didChangeFillColor fillColor: UIKit.UIColor?)
  func drawsanaView(_ drawsanaView: BetterBugs.DrawsanaView, didChangeStrokeWidth strokeWidth: CoreFoundation.CGFloat)
  func drawsanaView(_ drawsanaView: BetterBugs.DrawsanaView, didChangeFontName fontName: Swift.String)
  func drawsanaView(_ drawsanaView: BetterBugs.DrawsanaView, didChangeFontSize fontSize: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class DrawsanaView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any BetterBugs.DrawsanaViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var tool: (any BetterBugs.DrawingTool)? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public let userSettings: BetterBugs.UserSettings
  @_Concurrency.MainActor @preconcurrency final public let toolSettings: BetterBugs.ToolSettings
  @_Concurrency.MainActor @preconcurrency public var drawing: BetterBugs.Drawing {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var operationStack: BetterBugs.DrawingOperationStack {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectionIndicatorInset: CoreFoundation.CGPoint
  @_Concurrency.MainActor @preconcurrency final public let selectionIndicatorView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public var selectionIndicatorAnchorPointOffset: CoreFoundation.CGPoint
  @_Concurrency.MainActor @preconcurrency public var selectionIndicatorViewShapeLayer: QuartzCore.CAShapeLayer {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func set(tool: any BetterBugs.DrawingTool, shape: (any BetterBugs.Shape)? = nil)
  @_Concurrency.MainActor @preconcurrency public func nxrender(over image: UIKit.UIImage?, scale: CoreFoundation.CGFloat = 0.0) -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public func render(size: CoreFoundation.CGSize? = nil, scale: CoreFoundation.CGFloat = 0.0) -> UIKit.UIImage?
  @objc deinit
}
extension BetterBugs.DrawsanaView : BetterBugs.DrawsanaViewShapeUpdating {
  @_Concurrency.MainActor @preconcurrency public func rerenderAllShapesInefficiently()
}
public protocol DrawsanaViewShapeUpdating : AnyObject {
  func rerenderAllShapesInefficiently()
}
@_inheritsConvenienceInitializers @objc public class BetterBugsSdk : ObjectiveC.NSObject {
  @objc public static func startBetterBugs(apiKey: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public class RectShape : BetterBugs.ShapeWithTwoPoints, BetterBugs.ShapeWithStandardState, BetterBugs.ShapeSelectable {
  public static let type: Swift.String
  public var id: Swift.String
  public var a: CoreFoundation.CGPoint
  public var b: CoreFoundation.CGPoint
  public var strokeColor: UIKit.UIColor?
  public var fillColor: UIKit.UIColor?
  public var strokeWidth: CoreFoundation.CGFloat
  public var capStyle: CoreGraphics.CGLineCap
  public var joinStyle: CoreGraphics.CGLineJoin
  public var dashPhase: CoreFoundation.CGFloat?
  public var dashLengths: [CoreFoundation.CGFloat]?
  public var transform: BetterBugs.ShapeTransform
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func render(in context: CoreGraphics.CGContext)
  @objc deinit
}
public class NgonShape : BetterBugs.ShapeWithTwoPoints, BetterBugs.ShapeWithStandardState, BetterBugs.ShapeSelectable {
  public static let type: Swift.String
  public var id: Swift.String
  public var a: CoreFoundation.CGPoint
  public var b: CoreFoundation.CGPoint
  public var strokeColor: UIKit.UIColor?
  public var fillColor: UIKit.UIColor?
  public var strokeWidth: CoreFoundation.CGFloat
  public var capStyle: CoreGraphics.CGLineCap
  public var joinStyle: CoreGraphics.CGLineJoin
  public var dashPhase: CoreFoundation.CGFloat?
  public var dashLengths: [CoreFoundation.CGFloat]?
  public var transform: BetterBugs.ShapeTransform
  public var sides: Swift.Int!
  public var boundingRect: CoreFoundation.CGRect {
    get
  }
  public init(_ sides: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func render(in context: CoreGraphics.CGContext)
  @objc deinit
}
public class AngleShape : BetterBugs.ShapeWithThreePoints, BetterBugs.ShapeWithStrokeState, BetterBugs.ShapeSelectable {
  public static let type: Swift.String
  public var id: Swift.String
  public var a: CoreFoundation.CGPoint
  public var b: CoreFoundation.CGPoint
  public var c: CoreFoundation.CGPoint
  public var strokeColor: UIKit.UIColor
  public var strokeWidth: CoreFoundation.CGFloat
  public var capStyle: CoreGraphics.CGLineCap
  public var joinStyle: CoreGraphics.CGLineJoin
  public var dashPhase: CoreFoundation.CGFloat?
  public var dashLengths: [CoreFoundation.CGFloat]?
  public var transform: BetterBugs.ShapeTransform
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func render(in context: CoreGraphics.CGContext)
  @objc deinit
}
public class LineShape : BetterBugs.ShapeWithTwoPoints, BetterBugs.ShapeWithStrokeState, BetterBugs.ShapeSelectable {
  public enum ArrowStyle : Swift.String, Swift.Codable {
    case standard
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static let type: Swift.String
  public var id: Swift.String
  public var a: CoreFoundation.CGPoint
  public var b: CoreFoundation.CGPoint
  public var strokeColor: UIKit.UIColor
  public var strokeWidth: CoreFoundation.CGFloat
  public var capStyle: CoreGraphics.CGLineCap
  public var joinStyle: CoreGraphics.CGLineJoin
  public var dashPhase: CoreFoundation.CGFloat?
  public var dashLengths: [CoreFoundation.CGFloat]?
  public var arrowStyle: BetterBugs.LineShape.ArrowStyle?
  public var transform: BetterBugs.ShapeTransform
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func render(in context: CoreGraphics.CGContext)
  @objc deinit
}
public class TextShape : BetterBugs.Shape, BetterBugs.ShapeSelectable {
  public static let type: Swift.String
  public var id: Swift.String
  public var transform: BetterBugs.ShapeTransform
  public var text: Swift.String
  public var fontName: Swift.String
  public var fontSize: CoreFoundation.CGFloat
  public var fillColor: UIKit.UIColor
  public var explicitWidth: CoreFoundation.CGFloat?
  public var isBeingEdited: Swift.Bool
  public var boundingRect: CoreFoundation.CGRect
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func render(in context: CoreGraphics.CGContext)
  public func apply(userSettings: BetterBugs.UserSettings)
  @objc deinit
}
public class StarShape : BetterBugs.ShapeWithTwoPoints, BetterBugs.ShapeWithStandardState, BetterBugs.ShapeSelectable {
  public static let type: Swift.String
  public var id: Swift.String
  public var a: CoreFoundation.CGPoint
  public var b: CoreFoundation.CGPoint
  public var strokeColor: UIKit.UIColor?
  public var fillColor: UIKit.UIColor?
  public var strokeWidth: CoreFoundation.CGFloat
  public var capStyle: CoreGraphics.CGLineCap
  public var joinStyle: CoreGraphics.CGLineJoin
  public var dashPhase: CoreFoundation.CGFloat?
  public var dashLengths: [CoreFoundation.CGFloat]?
  public var transform: BetterBugs.ShapeTransform
  public var boundingRect: CoreFoundation.CGRect {
    get
  }
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func render(in context: CoreGraphics.CGContext)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Wormholy : ObjectiveC.NSObject {
  @objc public static var ignoredHosts: [Swift.String] {
    @objc get
    @objc set
  }
  @objc public static var limit: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public static func swiftyInitialize()
  @objc public static func enable(_ enable: Swift.Bool, sessionConfiguration: Foundation.URLSessionConfiguration)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class Storage : ObjectiveC.NSObject {
  public static let shared: BetterBugs.Storage
  public static var limit: Foundation.NSNumber?
  public static var defaultFilter: Swift.String?
  open var requests: [BetterBugs.RequestModel]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CustomHTTPProtocol : Foundation.URLProtocol {
  @objc override dynamic public class func canInit(with request: Foundation.URLRequest) -> Swift.Bool
  @objc override dynamic public class func canonicalRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
  @objc override dynamic public func startLoading()
  @objc override dynamic public func stopLoading()
  @objc deinit
}
extension BetterBugs.CustomHTTPProtocol : Foundation.URLSessionDataDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
}
@_hasMissingDesignatedInitializers open class RequestModel : Swift.Codable {
  final public let id: Swift.String
  final public let url: Swift.String
  final public let host: Swift.String?
  final public let port: Swift.Int?
  final public let scheme: Swift.String?
  final public let date: Foundation.Date
  final public let method: Swift.String
  final public let headers: [Swift.String : Swift.String]
  public var credentials: [Swift.String : Swift.String]
  public var cookies: Swift.String?
  open var httpBody: Foundation.Data?
  open var code: Swift.Int
  open var responseHeaders: [Swift.String : Swift.String]?
  open var dataResponse: Foundation.Data?
  open var errorClientDescription: Swift.String?
  open var duration: Swift.Double?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class EllipseShape : BetterBugs.ShapeWithTwoPoints, BetterBugs.ShapeWithStandardState, BetterBugs.ShapeSelectable {
  public static let type: Swift.String
  public var id: Swift.String
  public var a: CoreFoundation.CGPoint
  public var b: CoreFoundation.CGPoint
  public var strokeColor: UIKit.UIColor?
  public var fillColor: UIKit.UIColor?
  public var strokeWidth: CoreFoundation.CGFloat
  public var capStyle: CoreGraphics.CGLineCap
  public var joinStyle: CoreGraphics.CGLineJoin
  public var dashPhase: CoreFoundation.CGFloat?
  public var dashLengths: [CoreFoundation.CGFloat]?
  public var transform: BetterBugs.ShapeTransform
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func render(in context: CoreGraphics.CGContext)
  @objc deinit
}
public struct PenLineSegment : Swift.Codable, Swift.Equatable {
  public var a: CoreFoundation.CGPoint
  public var b: CoreFoundation.CGPoint
  public var width: CoreFoundation.CGFloat
  public init(a: CoreFoundation.CGPoint, b: CoreFoundation.CGPoint, width: CoreFoundation.CGFloat)
  public var midPoint: CoreFoundation.CGPoint {
    get
  }
  public static func == (a: BetterBugs.PenLineSegment, b: BetterBugs.PenLineSegment) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class PenShape : BetterBugs.Shape, BetterBugs.ShapeWithStrokeState, BetterBugs.ShapeSelectable {
  public static let type: Swift.String
  public var id: Swift.String
  public var isFinished: Swift.Bool
  public var start: CoreFoundation.CGPoint
  public var strokeColor: UIKit.UIColor
  public var strokeWidth: CoreFoundation.CGFloat
  public var segments: [BetterBugs.PenLineSegment]
  public var isEraser: Swift.Bool
  public var transform: BetterBugs.ShapeTransform
  public var boundingRect: CoreFoundation.CGRect {
    get
  }
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func add(segment: BetterBugs.PenLineSegment)
  public func render(in context: CoreGraphics.CGContext)
  public func renderLatestSegment(in context: CoreGraphics.CGContext)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Drawing : Swift.Codable {
  public static var debugSerialization: Swift.Bool
  public var size: CoreFoundation.CGSize
  public var shapes: [any BetterBugs.Shape] {
    get
  }
  public var shapeDecoder: ((BetterBugs.MultiDecoder<any BetterBugs.Shape>) -> Swift.Void)?
  public init(size: CoreFoundation.CGSize)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func add(shape: any BetterBugs.Shape)
  public func update(shape: any BetterBugs.Shape)
  public func remove(shape: any BetterBugs.Shape)
  public func getShape(at point: CoreFoundation.CGPoint, filter: ((any BetterBugs.Shape) -> Swift.Bool)? = nil) -> (any BetterBugs.Shape)?
  public func getShape<T>(of type: T.Type, at point: CoreFoundation.CGPoint, filter: ((any BetterBugs.Shape) -> Swift.Bool)? = nil) -> T? where T : BetterBugs.Shape
  @objc deinit
}
public enum DrawsanaDecodingError : Swift.Error {
  case wrongShapeTypeError
  case unknownShapeTypeError(Swift.String)
}
@_hasMissingDesignatedInitializers public class MultiDecoder<ResultType> {
  public func decode<T>(_ type: T.Type) throws where T : BetterBugs.Shape
  @objc deinit
}
extension QuartzCore.CALayer {
  @objc override dynamic open func setValue(_ value: Any?, forKey key: Swift.String)
}
extension BetterBugs.TextShapeEditingView.DragActionType : Swift.Equatable {}
extension BetterBugs.TextShapeEditingView.DragActionType : Swift.Hashable {}
extension BetterBugs.LineShape.ArrowStyle : Swift.Equatable {}
extension BetterBugs.LineShape.ArrowStyle : Swift.Hashable {}
extension BetterBugs.LineShape.ArrowStyle : Swift.RawRepresentable {}
